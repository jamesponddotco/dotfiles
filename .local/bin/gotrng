#!/usr/bin/env bash
#
# Script Name: Got Random?
# Script URL: https://git.sr.ht/~jamesponddotco/dotfiles
# Description: Feed the kernel entropy pool with data from an OneRNG device.
# Version: 0.1.0
# Author: James Pond
# Author URL: https://jamespond.co/
# License: European Union Public License 1.2 or later
# License URI: https://joinup.ec.europa.eu/collection/eupl/eupl-text-11-12
#

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -o errexit -o nounset -o errtrace -o pipefail
IFS=$'\n\t'

LC_ALL='C'
readonly LC_ALL

whoami="${0##*/}"
readonly whoami

if [[ -t 1 && -z "${NO_COLOR:-}" ]]; then
  c_red='\033[0;31m'
  c_blue='\033[0;34m'
  c_bold='\033[1m'
  c_reset='\033[0m'
  readonly c_red
  readonly c_blue
  readonly c_bold
  readonly c_reset
fi

display_usage() {

  echo -e "${c_blue:-}${c_bold:-}USAGE:${c_reset:-}"
  echo -e "${c_bold:-}$whoami${c_reset:-} [-f|--feeder </onerng/device/path/>] \
[-s|--stop </onerng/device/path/>] [-fw|--verify-firmware \
</onerng/device/path/>] [-h|--help]"

}

run_checks() {

  onerng_path="/dev/${2:-}"
  readonly onerng_path

  if ! [[ -f '/run/lock/gotrng.lock' ]]; then
    touch '/run/lock/gotrng.lock'
  fi

}

start_onerng() {

  stty raw -echo < "${onerng_path}"
  echo 'cmd0' > "${onerng_path}"
  echo 'cmdO' > "${onerng_path}"

}

stop_onerng() {

  echo 'cmdo' > "${onerng_path}"
  echo 'cmd4' > "${onerng_path}"
  echo 'cmdw' > "${onerng_path}"

}

stop_feeder() {

  rm --force '/run/lock/gotrng.lock'

}

verify_onerng_firmware() {

  local onerng_temp_file
  onerng_temp_file="$(mktemp --tmpdir --quiet 'gotrng-XXXXXXXXXX')"
  readonly onerng_temp_file

  dd if="${onerng_path}" iflag=fullblock of="${onerng_temp_file}" bs=4 &
  local dd_pid
  dd_pid="$!"
  readonly dd_pid
  sleep 0.02

  echo 'cmdO' > "${onerng_path}"
  echo 'cmdX' > "${onerng_path}"
  
  sleep 3.5
  if ps --pid "${dd_pid}" > '/dev/null' 2>&1; then
    kill -SIGTERM "${dd_pid}"
  fi
  stop_onerng

  set +e
  onerng_verify.py "${onerng_temp_file}"
  firmware_status="$?"
  set -e

  rm --force "${onerng_temp_file}"

  if [[ "${firmware_status}" -eq 1 ]]; then
    echo -e "${c_red:-}${c_bold:-}[ERROR]${c_reset:-} Device is broken or has \
been compromised."
    exit 1
  fi

}

feeding_method_feeder() {

  while true; do
    if [[ -f '/run/lock/gotrng.lock' ]]; then
      dd if="${onerng_path}" of='/dev/random' bs=128 count=200 \
        > '/dev/null' 2>&1
      sleep 5
    else
      exit 0
    fi
  done

}

# Call our functions.
case "${1:-}" in
  -f|--feeder)
    run_checks "$@"
    start_onerng
    verify_onerng_firmware
    start_onerng
    feeding_method_feeder
    ;;
  -s|--stop)
    run_checks "$@"
    stop_feeder
    stop_onerng
    ;;
  -fw|--verify-firmware)
    run_checks "$@"
    start_onerng
    verify_onerng_firmware
    ;;
  *)
    display_usage
    exit 22
esac

# All was well.
exit 0
