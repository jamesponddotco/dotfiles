#!/usr/bin/env bash
#
# Script Name: Sync Seedbox
# Script URL: https://git.sr.ht/~jamesponddotco/dotfiles
# Description: Download everything from my Seedbox to a local drive.
# Version: 1.0.1
# Author: James Pond
# Author URL: https://jamespond.co/
# License: European Union Public License 1.2 or later
# License URI: https://joinup.ec.europa.eu/collection/eupl/eupl-text-11-12
#

# Enable "bash strict mode".
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'

# Force all output to use the simplest locale.
readonly LC_ALL='C'

# Color variables to make our output a little easier on the eyes. Respect
# NO_COLOR, in case I do not want any.
if [[ -t 1 && -z "${NO_COLOR:-}" ]]; then
  readonly c_red='\033[0;31m'
  readonly c_blue='\033[0;34m'
  readonly c_green='\033[0;32m'
  readonly c_bold='\033[1m'
  readonly c_reset='\033[0m'
fi

seedbox_usage() {

  # Display usage information when necessary.
  echo -e "${c_blue:-}${c_bold:-}USAGE:${c_reset:-}"
  echo -e "${c_bold:-}sync-seedbox${c_reset:-} <url> </path/to/destination/>"

}

seedbox_checks() {

  # Store the URL and destination in their own variables.
  readonly seedbox_url="${1:-}"
  readonly sync_destination="${2:-}"

  # Check to see if I forgot the URL or destination arguments.
  if [[ -z "$seedbox_url" ]] || [[ -z "$sync_destination" ]]; then
    seedbox_usage
    exit 5
  fi

  # Check to see if we are running a sync operation already.
  if [[ -f '/tmp/sync-seedbox.lock' ]]; then
    echo -e "${c_red:-}${c_bold:-}[ERROR]${c_reset:-} Operation already in \
progress"
    exit 114
  else
    touch '/tmp/sync-seedbox.lock'
  fi

  # Check to see if I am connected to any of my WireGuard servers.
  if nmcli connection show --active | grep --quiet 'wireguard'; then
    echo -e "${c_red:-}${c_bold:-}[ERROR]${c_reset:-} Connection refused. \
Please disconnect the WireGuard VPN and try again."
    exit 111
  fi

  # Check to see if the URL I used is valid. To be valid it must include the
  # /files/ subdirectory and return 401 for a cURL call without credentials.
  readonly http_response="$(curl \
    --url "$seedbox_url" \
    --proto '=https' \
    --tlsv1.3 \
    --compressed \
    --silent \
    --write-out '%{http_code}' \
    --output '/dev/null')"
  if ! [[ "$http_response" == 401 ]] \
    || ! echo "$seedbox_url" | grep --quiet 'files'; then
    echo -e "${c_red:-}${c_bold:-}[ERROR]${c_reset:-} Invalid URL."
    seedbox_usage
    exit 22
  fi

  # Check to see if the destination is valid.
  if ! [[ -d "$sync_destination" ]]; then
    echo -e "${c_red:-}${c_bold:-}[ERROR]${c_reset:-} No such directory."
    exit 2
  fi

}

seedbox_main() {

  # Get the Seedbox credentials from pass(1).
  readonly seedbox_username="$(pass show seedbox/username)"
  readonly seedbox_password="$(pass show seedbox/password)"

  # Create a directory inside the destination to store the files.
  mkdir --parents "$sync_destination/sync-seedbox/"

  # Download everything from the Seedbox using good old wget(1).
  echo -e "${c_blue:-}${c_bold:-}[INFO]${c_reset:-} Downloading all files \
from the Seedbox to a local drive. Please wait..."
  wget --user "$seedbox_username" --password "$seedbox_password" \
    --directory-prefix "$sync_destination/sync-seedbox/" \
    --mirror "$seedbox_url"
  echo -e "${c_green:-}${c_bold:-}[SUCCESS]${c_reset:-} Done."

  # Remove the lock file when we are done.
  rm --force '/tmp/sync-seedbox.lock'

}

# Call our functions.
seedbox_checks "$@"
seedbox_main "$@"

# All was well.
exit 0
