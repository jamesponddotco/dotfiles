#!/usr/bin/env bash
#
# Script Name: IMG Diet
# Script URL: https://git.sr.ht/~jamesponddotco/dotfiles
# Description: Optimize image files using multiple open source utilities.
# Version: 0.1.1
# Author: James Pond
# Author URL: https://jamespond.co/
# License: GNU General Public License v2 or later
# License URI: http://www.gnu.org/licenses/gpl-2.0.html
#

# Enable "bash strict mode".
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'

# Force all output to use the simplest locale. Avoid issues with macOS.
readonly LC_ALL='C'

# Include MozJPEG earlier in the user's PATH if we are on macOS, since Homebrew
# do not do that to prevent conflicts with standard libjpeg.
if [[ "$(uname)" == 'Darwin' ]]; then
  export PATH="/usr/local/opt/mozjpeg/bin:$PATH"
fi

# Color variables to make our output a little easier on the eyes. Respect
# NO_COLOR, in case the user does not want any.
if [[ -t 1 && -z "${NO_COLOR:-}" ]]; then
  readonly c_red='\033[0;31m'
  readonly c_blue='\033[0;34m'
  readonly c_green='\033[0;32m'
  readonly c_bold='\033[1m'
  readonly c_reset='\033[0m'
fi

imgdiet_usage() {

  # Save the script name in case the user changes it.
  readonly whoami="${0##*/}"

  # Display usage information when necessary.
  echo -e "${c_blue:-}${c_bold:-}USAGE:${c_reset:-}"
  echo -e "${c_bold:-}$whoami${c_reset:-} [-i|--input <file>] [-h|--help]"

}

imgdiet_checks() {

  # Store the input file name and location.
  readonly input_file="${2:-}"

  # Store the extension of the file the user wants to optimize and convert it
  # to lowercase, to avoid issues with JPEG files, for example.
  readonly input_file_format="$(echo "${input_file##*.}" \
    | tr '[:upper:]' '[:lower:]')"

  # Check to see if the user forgot the filename argument.
  if [[ -z "$input_file" ]]; then
    imgdiet_usage
    exit 5
  fi

  # Check to see if the input file is supported.
  if ! [[ "${input_file_format}" =~ (png|jpe?g|gif|svg) ]]; then
    echo -e "${c_red:-}${c_bold:-}[ERROR]${c_reset:-} File format not \
supported. Please use a PNG, GIF, JPG or SVG image as input."
    exit 5
  fi

  # Check to see if the file exists.
  if ! [[ -f "$input_file" ]]; then
    echo -e "${c_red:-}${c_bold:-}[ERROR]${c_reset:-} No such file or \
directory."
    exit 2
  fi

  # Check see if all dependencies have been installed.
  imgdiet_dependency=(advpng pngquant cjpeg jpegtran gifsicle svgo realpath)
  for imgdiet_dependency in "${imgdiet_dependency[@]}"; do
    if ! command -v "$imgdiet_dependency" >/dev/null 2>&1; then
      echo -e "${c_red:-}${c_bold:-}[ERROR]${c_reset:-} Missing \
$imgdiet_dependency. Please check the README for more information."
      exit 65
    fi
  done

}

imgdiet_main() {

  # Inform the user that we are starting.
  echo -e "${c_blue:-}${c_bold:-}[INFO]${c_reset:-} Optimizing image, please \
wait..."

  # Optimize the image based on the file format.
  if [[ "$input_file_format" == 'png' ]]; then
    pngquant --skip-if-larger --force --quality 60-80 --speed 1 --strip \
      --ext '.png' "$input_file" || true
    advpng --quiet --recompress --shrink-insane "$input_file"
  elif [[ "$input_file_format" =~ jpe?g ]]; then
    readonly image_filename="$(basename "$input_file")"
    cjpeg -quality 60 -outfile /tmp/tmp-"$image_filename" "$input_file"
    jpegtran -copy none -outfile "$input_file" /tmp/tmp-"$image_filename"
    rm -f /tmp/tmp-"$image_filename"
  elif [[ "$input_file_format" == 'gif' ]]; then
    readonly cpu_threads="$(getconf _NPROCESSORS_ONLN)"
    gifsicle --optimize=3 --lossy=90 --threads="$cpu_threads" --no-comments \
      --no-names --no-extensions --no-verbose --no-warnings \
      --no-conserve-memory --batch "$input_file"
  elif [[ "$input_file_format" == 'svg' ]]; then
    svgo --quiet --multipass "$input_file"
  fi

  # Inform the user that the image has been optimized.
  echo -e "${c_green:-}${c_bold:-}[SUCCESS]${c_reset:-} Done."
  echo -e "${c_blue:-}${c_bold:-}[INFO]${c_reset:-} You can find your image \
at $(realpath "$input_file")."

}

# Call our functions.
case "${1:-}" in
  -i|--input)
    imgdiet_checks "$@"
    imgdiet_main "$@"
    ;;
  -h|--help)
    imgdiet_usage
    ;;
  *)
    imgdiet_usage
    exit 22
esac

# All was well.
exit 0
