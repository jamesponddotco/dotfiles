#!/usr/bin/env bash
#
# Script Name: 1P
# Script URL: https://git.sr.ht/~jamesponddotco/dotfiles
# Description: 1Password CLI wrapper with PINEntry integration.
# Version: 0.1.0
# Author: James Pond
# Author URL: https://jamespond.co/
# License: European Union Public License 1.2 or later
# License URI: https://joinup.ec.europa.eu/collection/eupl/eupl-text-11-12
#

# Use bash's "unofficial strict mode".
set -o errexit -o nounset -o errtrace -o pipefail
IFS=$'\n\t'

# Force all output to use the simplest locale.
LC_ALL='C'
readonly LC_ALL

# Increase verbosity if we are running tests.
if [[ "${BASH_OUTPUT:-quiet}" == 'verbose' ]]; then
  set -o xtrace
fi

# If a session toke file already exists, grab and save it. Otherwise, create a
# placeholder file with tight permissions.
user_id="$(id --user)"
readonly user_id
if [[ -d "/dev/shm/${user_id}/" ]]; then
  secure_tmp="/dev/shm/${user_id}"
  readonly secure_tmp
elif [[ -d "/tmp/${user_id}/" ]]; then
  secure_tmp="/tmp/${user_id}"
  readonly secure_tmp
elif [[ -d '/dev/shm/' && -w '/dev/shm/' && -x '/dev/shm/' ]]; then
  mkdir --mode 700 "/dev/shm/${user_id}/"
  secure_tmp="/dev/shm/${user_id}"
  readonly secure_tmp
elif df --type 'tmpfs' '/tmp/' > '/dev/null' 2>&1; then
  mkdir --parents "/tmp/user/${user_id}/"
  chmod --recursive 700 "/tmp/user/${user_id}"
  secure_tmp="/tmp/user/${user_id}"
  readonly secure_tmp
else
  printf '[ERROR] No secure location to store session file found. Exiting.\n'
  exit 1
fi
token_file="${secure_tmp}/op-session.token"
readonly token_file
if [[ -f "${token_file}" && -s "${token_file}" ]]; then
  session_token="$(cat "${token_file}")"
else
  install --mode 600 '/dev/null' "${token_file}"
fi

# Do not try to renew the token if we are logging out.
if [[ "${1:-}" == 'signout' ]]; then
  op --session "${session_token:-}" signout
  shred --force --remove --zero "${token_file}"
  exit 0
fi

# Check to see if our session is still valid. If it is, just feed the 1Password
# CLI with whatever the user asked, but if the session has expired already or
# does not exist, use pinentry-curses to ask for the master password and
# generate a new working session.
if op --session "${session_token:-}" get account > '/dev/null' 2>&1; then
  op --session "${session_token}" --cache "$@"
else
  # Check to see if the configuration file for op exists.
  if [[ -f "${HOME}/.op/config" && -s "${HOME}/.op/config" ]]; then
    configuration_file="${HOME}/.op/config"
    readonly configuration_file
  elif [[ -f "${HOME}/.config/op/config" \
    && -s "${HOME}/.config/op/config" ]]; then
    configuration_file="${HOME}/.config/op/config"
    readonly configuration_file
  else
    printf '[ERROR] You must configure op before using 1p. Exiting.\n'
    exit 1
  fi

  # Use pinentry-curses to ask for the user's master password.
  pinentry_tty="$(tty)"
  readonly pinentry_tty
  master_password="$(printf \
    "SETDESC Please enter your passphrase to unlock the vault.\nSETPROMPT Passphrase:\nGETPIN\n" \
      | pinentry-curses --ttyname "${pinentry_tty}" --lc-ctype 'UTF-8' \
      | grep '^D ' \
      | cut --characters 3-)"
  readonly master_password

  # Grab the account shorthand for 1Password from op's configuration file.
  account_shorthand="$(jq --raw-output '.accounts[].shorthand' \
    "${configuration_file}")"
  readonly account_shorthand
  
  # Feed the master password to 1Password CLI and store the login token on the
  # file we created earlier. With all the precautions we took above, this
  # should be safeish.
  printf '%s' "${master_password}" \
    | op signin --raw "${account_shorthand}" > "${token_file}"

  # Call 1Password CLI and pass whatever the user sent to it.
  session_token="$(cat "${token_file}")"
  op --session "${session_token}" --cache "$@"
fi

# All was well.
exit 0
