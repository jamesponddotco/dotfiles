#!/usr/bin/env bash
#
# Script Name: Are You TLS 1.3 yet?
# Script URL: https://git.sr.ht/~jamesponddotco/dotfiles
# Description: Check to see if a website supports TLS 1.3.
# Version: 1.0.0
# Author: James Pond
# Author URL: https://jamespond.co/
# License: European Union Public License 1.2 or later
# License URI: https://joinup.ec.europa.eu/collection/eupl/eupl-text-11-12
#

# Use bash's "unofficial strict mode".
set -o errexit -o nounset -o errtrace -o pipefail
IFS=$'\n\t'

# Force all output to use the simplest locale.
LC_ALL='C'
readonly LC_ALL

# Save the name of the script inside a readonly variable.
whoami="${0##*/}"
readonly whoami

# Color variables to make our output a little easier on the eyes. Respect
# NO_COLOR, in case the user does not want any.
if [[ -t 1 && -z "${NO_COLOR:-}" ]]; then
  c_red='\033[0;31m'
  c_blue='\033[0;34m'
  c_green='\033[0;32m'
  c_bold='\033[1m'
  c_reset='\033[0m'
  readonly c_red
  readonly c_blue
  readonly c_green
  readonly c_bold
  readonly c_reset
fi

display_usage() {

  # Display usage information when necessary.
  echo -e "${c_blue:-}${c_bold:-}USAGE:${c_reset:-}"
  echo -e "${c_bold:-}$whoami${c_reset:-} [-d|--domain <DOMAIN>] [-h|--help]"

}

run_checks() {

  # Ensures the user provided a domain to test.
  local input_domain
  input_domain="${2:-}"
  if [[ -z "$input_domain" ]]; then
    display_usage
    exit 22
  fi

}

main() {

  # Normalize the URL given by the user.
  input_domain="$(echo -n "$2" \
    | cut --delimiter '/' --fields 3 \
    | cut --delimiter ':' --fields 1)"
  readonly input_domain

  # Check what the status code for `openssl s_client connect` returns and
  # decide if the website supports TLS 1.3 or not based on that.
  if openssl s_client -tls1_3 -connect "$input_domain":443 < /dev/null > /dev/null 2>&1; then
    echo -e "${c_green}${c_bold}Yes!${c_reset}"
  else
    echo -e "${c_red}${c_bold}No.${c_reset}"
  fi

}

# Call our functions.
case "${1:-}" in
  -d|--domain)
    run_checks "$@"
    main "$@"
    ;;
  -h|--help)
    display_usage
    ;;
  *)
    display_usage
    exit 22
esac

# All was well.
exit 0
